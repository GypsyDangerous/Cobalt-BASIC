Cobalt BASIC grammar rules

statements	: newline* statement (newline+ statement)* newline*

statement	: return
			: continue
			: break
			: expr

expr        : KEYWORD:(let|var) IDENTIFIER EQ expr
            : comp-expr ((and|or) comp-expr)
            
comp-expr   : not comp-expr
            : arith-expr ((EE|LT|GT|LTE|GETE) arith-expr)*
        
arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV|MOD) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call		: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom 		: INT|FLOAT|STRING|IDENTIFIER
			: LPAREN expr RPAREN
			: list-expr
			: if-expr
			: for-expr
			: while-expr
			: func-def

list-expr	: LBRACKET (expr (COMMA expr)*)? RBRACKET

if-expr		: KEYWORD:if expr KEYWORD:THEN
			  (statement if-expr-b|if-expr-c?)
			  (newline statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-b	: KEYWORD:elif expr KEYWORD:':'
			  (statement if-expr-b|if-expr-c?)
			  (newline statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-c	: KEYWORD:else
			  statement
			  (newline statements KEYWORD:end)
			

for-expr	: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
			  (KEYWORD:STEP expr)? KEYWORD:THEN
			  statement
			  (newline statements KEYWORD:end)

while-expr	: KEYWORD:WHILE expr KEYWORD:THEN 
			  statement
			  (newline statements KEYWORD:end)

func-def	: KEYWORD def IDENTIFIER?
			  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
			  (ARROW expr)
			| (newline statements KEYWORD:end)


 

